<!DOCTYPE html>
<html lang="{{ metadata.locale }}" class="h-full">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <title>{{ metadata.title }}</title>
        <meta name="description" content="{{ metadata.description }}" />
        <meta name="keywords" content="{{ metadata.keywords_csv }}" />
        <link rel="canonical" href="{{ metadata.canonical_url }}" />
        <meta name="robots" content="index,follow" />

        {{ for alt in metadata.hreflang_alternates }}
        {{ if alt.item1 != 'x-default' }}
        <link rel="alternate" hreflang="{{ alt.item1 }}" href="{{ alt.item2 }}" />
        {{ end }}
        {{ end }}

        <meta property="og:title" content="{{ metadata.title }}" />
        <meta property="og:description" content="{{ metadata.description }}" />
        <meta property="og:type" content="article" />
        <meta property="og:url" content="{{ metadata.canonical_url }}" />
        <meta property="og:locale" content="{{ metadata.locale }}" />
        {{ if metadata.og_image_url.size != "" }}
        <meta property="og:image" content="{{ metadata.og_image_url }}" />
        {{ end }}

        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="{{ metadata.title }}" />
        <meta name="twitter:description" content="{{ metadata.description }}" />
        {{ if metadata.og_image_url.size != "" }}
        <meta name="twitter:image" content="{{ metadata.og_image_url }}" />
        {{ end }}

        <script type="application/ld+json">{{ metadata.json_ld }}</script>
        <meta name="article:published_time" content="{{ metadata.published_iso }}" />
        <meta name="article:modified_time" content="{{ metadata.modified_iso }}" />
        
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        
        <script>
            // Multi-series salary statistics for comprehensive filtering
            // Ensure valid JS even if the JSON is empty or missing and `l` is not defined
            window.salaryData = {{ if l != null && l.multi_series_stats_json != null && l.multi_series_stats_json != "" }}{{ l.multi_series_stats_json }}{{ else }}null{{ end }};
        </script>
    </head>
    <body class="min-h-full bg-gray-50 text-gray-900">
        <header class="bg-white shadow-sm">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6 flex flex-col gap-4 md:flex-row md:items-end md:justify-between">
                <div>
                    <h1 class="text-3xl font-bold tracking-tight">{{ metadata.title }}</h1>
                    <p class="mt-1 text-sm text-gray-500">{{ l.ui.updated }}: {{ report_date }}</p>
                </div>
                {{ if locales.size > 1 }}
                <div class="text-sm">
                    <label for="locale-select" class="sr-only">Language</label>
                    <select id="locale-select" class="border border-gray-300 rounded-md px-2 py-1 text-sm bg-white shadow-sm">
                        <option value="{{ metadata.canonical_url }}" {{ if metadata.locale == current_locale }}selected{{ end }}>{{ metadata.locale }}</option>
                        {{ for alt in metadata.hreflang_alternates }}
                        {{ if alt.item1 != 'x-default' && alt.item1 != metadata.locale }}
                        <option value="{{ alt.item2 }}" {{ if alt.item1 == current_locale }}selected{{ end }}>{{ alt.item1 }}</option>
                        {{ end }}
                        {{ end }}
                    </select>
                </div>
                <script>
                    (function(){
                        var sel = document.getElementById('locale-select');
                        if(!sel) return;
                        sel.addEventListener('change', function(){
                            var v = this.value;
                            if(v) window.location.href = v;
                        });
                    })();
                </script>
                {{ end }}
            </div>
        </header>

        <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8">
            <section class="mb-12 space-y-10">
            {{ for report_group in report_groups }}
                <div class="border-b border-gray-200 pb-6">
                    {{ include "ReportGroupTemplate.sbn" report_group }}
                </div>
            {{ end }}
            </section>

            <section id="stack-comparison" class="mb-16">
                <div class="bg-white rounded-lg shadow-sm ring-1 ring-gray-200 p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h5 class="text-lg font-semibold text-gray-900">{{ l.ui.stack_comparison.title }}</h5>
                        <div class="text-xs text-gray-500">{{ l.ui.stack_comparison.explainer }}</div>
                    </div>

                    <div class="flex flex-col gap-3 mb-4">
                        <!-- First row: Search, buttons, sort -->
                        <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-3">
                            <div class="flex items-center gap-2">
                                <input id="stack-filter" type="text" placeholder="{{ l.ui.stack_comparison.search }}" class="border border-gray-300 rounded-md px-2 py-1 text-sm" />
                                <button id="select-all" class="px-2 py-1 text-sm rounded-md bg-gray-100 hover:bg-gray-200">{{ l.ui.stack_comparison.select_all }}</button>
                                <button id="select-none" class="px-2 py-1 text-sm rounded-md bg-gray-100 hover:bg-gray-200">{{ l.ui.stack_comparison.select_none }}</button>
                                <button id="top-5" class="px-2 py-1 text-sm rounded-md bg-gray-100 hover:bg-gray-200">{{ l.ui.stack_comparison.top_n }}</button>
                            </div>
                            <div class="flex items-center gap-2">
                                <label class="text-sm text-gray-600">{{ l.ui.stack_comparison.sort }}</label>
                                <select id="sort-mode" class="border border-gray-300 rounded-md px-2 py-1 text-sm">
                                    <option value="median_desc">{{ l.ui.stack_comparison.sort_median }}</option>
                                    <option value="count_desc">{{ l.ui.stack_comparison.sort_count }}</option>
                                    <option value="share_desc">{{ l.ui.stack_comparison.sort_share }}</option>
                                </select>
                            </div>
                        </div>

                        <!-- Second row: Period and Level filters -->
                        <div class="flex flex-col md:flex-row gap-3">
                            <div class="flex items-center gap-2">
                                <label class="text-sm text-gray-600">{{ l.ui.stack_comparison.period }}</label>
                                <select id="period-mode" class="border border-gray-300 rounded-md px-2 py-1 text-sm">
                                    <option value="last_month">{{ l.ui.stack_comparison.last_month }}</option>
                                    <option value="year">{{ l.ui.stack_comparison.year }}</option>
                                </select>
                                <select id="year-select" class="border border-gray-300 rounded-md px-2 py-1 text-sm hidden"></select>
                            </div>
                            <div class="flex items-center gap-2">
                                <label class="text-sm text-gray-600">Position Level</label>
                                <select id="level-filter" class="border border-gray-300 rounded-md px-2 py-1 text-sm">
                                    <option value="">All Levels</option>
                                    <option value="Junior">Junior</option>
                                    <option value="Middle">Middle</option>
                                    <option value="Senior">Senior</option>
                                    <option value="Lead">Lead</option>
                                </select>
                            </div>
                            <div class="flex items-center gap-2">
                                <label class="flex items-center gap-1 text-sm text-gray-600 cursor-pointer">
                                    <input type="checkbox" id="show-percentiles" class="rounded" />
                                    <span>Show Full Percentiles</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div id="stack-pills" class="flex flex-wrap gap-2 mb-4"></div>

                    <div class="grid grid-cols-1 gap-6">
                        <div class="overflow-x-auto">
                            <table class="min-w-full table-auto border-collapse border border-gray-200 text-sm">
                                <thead class="bg-gray-50">
                                    <tr id="table-header-row">
                                        <th class="border border-gray-200 px-4 py-2 text-left">{{ l.ui.stack_comparison.stack }}</th>
                                        <th class="border border-gray-200 px-4 py-2 text-right">{{ l.ui.stack_comparison.count }}</th>
                                        <th class="border border-gray-200 px-4 py-2 text-right">P25</th>
                                        <th class="border border-gray-200 px-4 py-2 text-right">Median</th>
                                        <th class="border border-gray-200 px-4 py-2 text-right">P75</th>
                                        <th class="border border-gray-200 px-4 py-2 text-right">{{ l.ui.stack_comparison.share }}</th>
                                    </tr>
                                </thead>
                                <tbody id="stack-rows" class="divide-y divide-gray-200"></tbody>
                            </table>
                        </div>

                        <div class="bg-white">
                            <canvas id="stack-chart" height="120"></canvas>
                        </div>
                    </div>
                </div>

                <script>
                    window.StackComparison = {{ dump stack_comparison }};
                    window.StackComparisonByYear = {{ if l != null && l.stack_comparison_years != null }}{{ dump l.stack_comparison_years }}{{ else }}[]{{ end }};
                    (function(){
                        // Check if comprehensive salary data is available
                        var salaryData = window.salaryData || null;
                        var hasSalaryData = !!(salaryData && salaryData.byStack && salaryData.stacks);
                        
                        var lastMonth = window.StackComparison || [];
                        var yearly = window.StackComparisonByYear || [];
                        
                        // Transform new data structure if available
                        if (hasSalaryData) {
                            lastMonth = salaryData.stacks.map(function(stack) {
                                var stackData = salaryData.byStack[stack.name];
                                if (!stackData) return null;
                                return {
                                    name: stack.name,
                                    label: stack.name,
                                    count: stack.jobCount,
                                    median: stackData.aggregates.medianSalary,
                                    mean: stackData.aggregates.meanSalary,
                                    p10: stackData.aggregates.percentiles.p10,
                                    p25: stackData.aggregates.percentiles.p25,
                                    p50: stackData.aggregates.percentiles.p50,
                                    p75: stackData.aggregates.percentiles.p75,
                                    p90: stackData.aggregates.percentiles.p90,
                                    _share: stack.percentage
                                };
                            }).filter(Boolean);
                        }
                        
                        var data = lastMonth;
                        var currentLevel = '';
                        var showPercentiles = false;
                        
                        var filterInput = document.getElementById('stack-filter');
                        var pills = document.getElementById('stack-pills');
                        var tbody = document.getElementById('stack-rows');
                        var tableHeader = document.getElementById('table-header-row');
                        var sortSel = document.getElementById('sort-mode');
                        var periodSel = document.getElementById('period-mode');
                        var yearSel = document.getElementById('year-select');
                        var levelFilter = document.getElementById('level-filter');
                        var percentilesCheckbox = document.getElementById('show-percentiles');
                        var btnAll = document.getElementById('select-all');
                        var btnNone = document.getElementById('select-none');
                        var btnTop = document.getElementById('top-5');
                        var chartCtx = document.getElementById('stack-chart').getContext('2d');
                        var chartInstance = null;

                        var selected = new Set(lastMonth.map(function(x){ return x.name; }));

                        function hsvToRgb(h, s, v){
                            var c=v*s; var x=c*(1-Math.abs((h/60)%2-1)); var m=v-c; var r=0,g=0,b=0;
                            if(h<60){r=c;g=x;} else if(h<120){r=x;g=c;} else if(h<180){g=c;b=x;} else if(h<240){g=x;b=c;} else if(h<300){r=x;b=c;} else {r=c;b=x;}
                            return {r:Math.round((r+m)*255),g:Math.round((g+m)*255),b:Math.round((b+m)*255)};
                        }
                        function rgbToHex(r,g,b){return '#'+[r,g,b].map(function(x){var h=x.toString(16);return h.length===1?'0'+h:h;}).join('');}
                        function nameColor(name){
                            var h=0; for(var i=0;i<name.length;i++){h=(h*31 + name.charCodeAt(i))>>>0;} h=h%360; var rgb=hsvToRgb(h,0.65,0.65); return rgbToHex(rgb.r,rgb.g,rgb.b);
                        }

                        function computeShare(rows){
                            var total = data.reduce(function(acc,x){ return acc + x.count; }, 0) || 1;
                            return rows.map(function(x){ var share = total? (x.count/total*100) : 0; x._share = share; return x; });
                        }

                        function updateTableHeaders() {
                            if (showPercentiles && hasSalaryData) {
                                tableHeader.innerHTML = '<th class="border border-gray-200 px-4 py-2 text-left">Stack</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Count</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P10</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P25</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Median</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P75</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P90</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Share</th>';
                            } else {
                                tableHeader.innerHTML = '<th class="border border-gray-200 px-4 py-2 text-left">Stack</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Count</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P25</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Median</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">P75</th>' +
                                                       '<th class="border border-gray-200 px-4 py-2 text-right">Share</th>';
                            }
                        }

                        function renderPills(items){
                            pills.innerHTML='';
                            items.forEach(function(x){
                                var color=nameColor(x.name);
                                var el=document.createElement('button');
                                el.className='px-2 py-1 text-xs rounded-md border flex items-center gap-1';
                                el.style.borderColor=color; el.style.backgroundColor= selected.has(x.name)?color:'transparent'; el.style.color= selected.has(x.name)? '#fff' : color;
                                el.textContent=x.label||x.name;
                                el.addEventListener('click', function(){
                                    if(selected.has(x.name)) selected.delete(x.name); else selected.add(x.name);
                                    render();
                                });
                                pills.appendChild(el);
                            });
                        }

                        function renderRows(items){
                            tbody.innerHTML='';
                            computeShare(items).forEach(function(x){
                                if(!selected.has(x.name)) return;
                                var color=nameColor(x.name);
                                
                                var tr=document.createElement('tr');
                                if (showPercentiles && hasSalaryData) {
                                    tr.innerHTML='<td class="border border-gray-200 px-4 py-2"><span class="inline-block w-2 h-2 rounded-full mr-2" style="background:'+color+'"></span>'+ (x.label||x.name) +'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+x.count.toLocaleString()+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p10)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p25)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.median)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p75)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p90)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+x._share.toFixed(1)+'%'+ '</td>';
                                } else {
                                    tr.innerHTML='<td class="border border-gray-200 px-4 py-2"><span class="inline-block w-2 h-2 rounded-full mr-2" style="background:'+color+'"></span>'+ (x.label||x.name) +'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+x.count.toLocaleString()+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p25)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.median)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+fmt(x.p75)+'</td>'+
                                                 '<td class="border border-gray-200 px-4 py-2 text-right">'+x._share.toFixed(1)+'%'+ '</td>';
                                }
                                tbody.appendChild(tr);
                            });
                        }

                        function fmt(v){ return (typeof v==='number' && !isNaN(v)) ? (v%1===0? v.toLocaleString() : v.toLocaleString(undefined,{maximumFractionDigits:2})) : '—'; }

                        function buildBarChartData(rows){
                            var labels = [];
                            var dataPoints = [];
                            var bg = [];
                            rows.forEach(function(x){
                                if(!selected.has(x.name)) return;
                                labels.push(x.label||x.name);
                                dataPoints.push(x.median||0);
                                bg.push(nameColor(x.name));
                            });
                            return { labels: labels, datasets: [{ label: 'Median', data: dataPoints, backgroundColor: bg }] };
                        }

                        function ensureChart(type, chartData){
                            if(chartInstance){ chartInstance.destroy(); }
                            chartInstance = new Chart(chartCtx, {
                                type: type,
                                data: chartData,
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    plugins: { legend: { display: false } },
                                    scales: { y: { beginAtZero: true } }
                                }
                            });
                        }

                        function getDataForLevel(level) {
                            if (!level || !hasSalaryData || !salaryData.yearlyStats.byLevel[level]) {
                                return lastMonth;
                            }
                            
                            // Get latest year from level data
                            var levelStats = salaryData.yearlyStats.byLevel[level];
                            var years = Object.keys(levelStats.medianByYear || {}).sort();
                            if (years.length === 0) return [];
                            
                            var latestYear = years[years.length - 1];
                            

                            return lastMonth;
                        }

                        function render(){
                            var filter=filterInput.value.toLowerCase();
                            var rows=data.filter(function(x){ return x.name.toLowerCase().indexOf(filter)>=0 || (x.label||'').toLowerCase().indexOf(filter)>=0; });
                            var mode=sortSel.value;
                            if(mode==='median_desc') rows.sort(function(a,b){return (b.median||0)-(a.median||0)});
                            else if(mode==='count_desc') rows.sort(function(a,b){return (b.count||0)-(a.count||0)});
                            else if(mode==='share_desc') rows.sort(function(a,b){return (b._share||0)-(a._share||0)});
                            
                            updateTableHeaders();
                            renderPills(rows);
                            renderRows(rows);
                            var chartData = buildBarChartData(rows);
                            ensureChart('bar', chartData);
                            try { localStorage.setItem('stack_selected', JSON.stringify(Array.from(selected))); } catch(e){}
                        }

                        function refreshYearOptions() {
                            yearSel.innerHTML = '';
                            var years = yearly.map(function(y){ return y.year; });
                            years.forEach(function(y){
                                var opt = document.createElement('option');
                                opt.value = String(y);
                                opt.textContent = String(y);
                                yearSel.appendChild(opt);
                            });
                        }

                        periodSel.addEventListener('change', function(){
                            if (periodSel.value === 'year') {
                                refreshYearOptions();
                                yearSel.classList.remove('hidden');
                                data = [];
                                render();
                            } else {
                                yearSel.classList.add('hidden');
                                data = getDataForLevel(currentLevel);
                                render();
                            }
                        });

                        yearSel.addEventListener('change', function(){
                            var yr = parseInt(yearSel.value, 10);
                            var group = yearly.find(function(g){ return g.year === yr; });
                            if (!group) {
                                data = [];
                            } else {
                                data = group.items || [];
                            }
                            render();
                        });

                        levelFilter.addEventListener('change', function(){
                            currentLevel = this.value;
                            data = getDataForLevel(currentLevel);
                            render();
                        });

                        percentilesCheckbox.addEventListener('change', function(){
                            showPercentiles = this.checked;
                            render();
                        });

                        btnAll.addEventListener('click', function(){ selected = new Set((data.length?data:lastMonth).map(function(x){return x.name;})); render(); });
                        btnNone.addEventListener('click', function(){ selected = new Set(); render(); });
                        btnTop.addEventListener('click', function(){ var src=(data.length?data:lastMonth).slice().sort(function(a,b){return (b.median||0)-(a.median||0)}).slice(0,5).map(function(x){return x.name}); selected = new Set(src); render(); });
                        filterInput.addEventListener('input', render);
                        sortSel.addEventListener('change', render);

                        // Initialize
                        render();
                    })();
                </script>
            </section>

            <section id="data-sources" class="mb-16">
                {{ include "DataSources.sbn" }}
            </section>
        </main>

        <footer class="border-t border-gray-200">
            <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8 text-center text-sm text-gray-600">
                <p class="mb-4">
                    {{ l.ui.footer.author }}: <a href="https://www.linkedin.com/in/kirillta/?locale=en_US" class="text-blue-600 hover:text-blue-800">Kirill Taran</a>. 
                    {{ l.ui.footer.source }}: <a href="https://github.com/kirillta/tg-job-ad-analytics" class="text-blue-600 hover:text-blue-800">GitHub</a>.
                </p>
                <p>
                    {{ l.ui.footer.built_with }} 
                    <a href="https://tailwindcss.com/" class="text-blue-600 hover:text-blue-800">Tailwind CSS</a>, 
                    <a href="https://www.chartjs.org/" class="text-blue-600 hover:text-blue-800">Chart.js</a> {{ l.ui.footer.and }} 
                    <a href="https://github.com/scriban/scriban" class="text-blue-600 hover:text-blue-800">Scriban</a>.
                </p>
            </div>
        </footer>
    </body>
</html>